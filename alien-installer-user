#!/bin/bash

trap 'INTERRUPT' 2 ERR

#############################################################
INTERRUPT()
#############################################################
{
# Ctrl+c command or an Error: the installation will exit
# gracefully stopping child processes and moving the existing
# installation folder to .failed before exiting (if needed).

# Exit codes:
#	1	General failure
#	2	*Ctrl+c interrupt (No initial error code)
#	3	*Pre-install failure
#	4	AliEn distribution download failure.
#	5	Relocation failure
# * - nothing will be moved to .failed

STOPDOTS
STOPLOCK

if [ -f "$TMPFILE" ]; then rm -f "$TMPFILE"; fi
if [ -f "$LOCK" ]; then rm -f "$LOCK"; fi

ERROR_CODE="$1"
shift 1

if 	[ "$ERROR_CODE" = "" ]; then	LOG normal " \n   Installation interrupted. Exit code: -2"; exit -2;
elif 	[ "$ERROR_CODE" = "-3" ]; then	LOG normal "$@ Exit code: $ERROR_CODE";
else
	MOVETOFAILED "$ALIEN_INSTALL_DIR"
	LOG normal "$@ \n   Installation cancelled. Exit code: $ERROR_CODE"; fi
exit "$ERROR_CODE"
}

#############################################################
MOVETOFAILED()
#############################################################
{
# Input: Directory path
# Moving the given folder to folder with ".failed" suffix.

if [ ! "$1" = "" -a -d "$1" ]; then
	ALIEN_FAILED="$1.failed"
	while [ -d "$ALIEN_FAILED" ];
	do	ALIEN_FAILED="$ALIEN_FAILED.failed"
	done

	LOG verbose "Moving $1 to $ALIEN_FAILED"
	mv "$1" "$ALIEN_FAILED"; fi
}

#############################################################
GETPROCESSLIST()
#############################################################
{
# Input: Parent PID	Output: PROCESS_LIST[@] of all the child processes
# Recursive procedure to retrieve a list of all running child processes
# started by the parent process.

PROCESS_LIST=( "${PROCESS_LIST[@]}"  "$1" )
PROCESS_TEMP=( `ps -o pid --ppid $1 | grep -v PID` )

for current_pid in ${PROCESS_TEMP[*]}
do	GETPROCESSLIST "$current_pid"
done
}

#############################################################
LOG()
#############################################################
{
# Input format: LOG "verbose/normal/silent/process" "message" 
# Logs/Displays messages depending on the mode and message type:
#	- verbose: 	Message displayed only in verbose mode.
#	- normal: 	Usual message displayed and logged.
#	- silent: 	Only log the message. Do not display.	
# 	- process: 	Special print, used for download/dot prints.

if [ "$1" = "process" ]; then shift 1; echo -n "   $@";
elif [ ! "$ALIEN_INSTALLER_VERBOSE" = "1" -a "$1" = "verbose" ] || [ "$1" = "silent" ]; then shift 1;
else shift 1; echo -e "   $@"; fi

if [ ! "$LOGFILE" = "" ]; then echo "[$$] "`date +"%F %T"`: "$@" >> "$LOGFILE";
else echo "$@"; fi
}

#############################################################
LOGFILERELOCATE()
#############################################################
{
# For workernode place the installation log where the install folder is, otherwise inside the install directory
#if [ "$ALIEN_TYPE" = "workernode" ]; then 	cat "$LOGFILE" >> "$ALIEN_USER_DIR/../$ALIEN_INSTALLER_NAME.log";
#else						cat "$LOGFILE" >> "$ALIEN_USER_DIR/$ALIEN_INSTALLER_NAME.log"; fi
cat "$LOGFILE" >> "$ALIEN_USER_DIR/$ALIEN_INSTALLER_NAME.log"
rm "$LOGFILE"
}

#############################################################
PRINTDOTS()
#############################################################
{
# Print a dot every second.
while [ true ];
do 	echo -n "."
	sleep 1
done
}

#############################################################
STARTDOTS()
#############################################################
{
# Log the initial process message.
LOG process "$@"
# Start print of dots as a separate process.
PRINTDOTS &
ALIEN_DOT_PID=$!
}

#############################################################
STOPDOTS()
#############################################################
{
# Stop dot printing sub-process, if it is running.
if [ ! "$ALIEN_DOT_PID" = "" ]; then
	TMP_PROCESS=`ps -p "$ALIEN_DOT_PID"`
	if [ ! "$TMP_PROCESS" = "" ]; then
		disown $ALIEN_DOT_PID >/dev/null 2>&1
		kill $ALIEN_DOT_PID >/dev/null 2>&1
		# Reset the dot process identifier.
		ALIEN_DOT_PID=""; fi
	LOG normal "Done"; fi
}

#############################################################
PARSEARGUMENTS()
#############################################################
{
# Input: Arguments passed to the installer
# Identify the actions to be performed during installation.
while [ $# -gt 0 ]
	do
	case $1 in 
	-help|--help|-h)
		PRINTOPTIONS
		exit 0 ;;
	-help-more|--help-more)
		ALIEN_ADVANCED_OPTIONS=1
		PRINTOPTIONS
		exit 0 ;;
	-install-dir|--install-dir)
		shift 1
		ALIEN_USER_DIR=$1 ;;
	-restart|--restart)
		ALIEN_RESTART=1 ;;
	-type|--type)
		shift 1
		ALIEN_TYPE=$1 ;;
	-update-me|--update-me)
		GETDOWNLOADCLIENT
		echo "Current installer version: $ALIEN_INSTALLER_VERSION"
		"$ALIEN_DOWNLOAD_CLIENT" http://alien.cern.ch/alien-installer "$ALIEN_DOWNLOAD_OUTPUT" "$ALIEN_INSTALLER_NAME".new > /dev/null 2>&1
		chmod +x "$ALIEN_INSTALLER_NAME".new
		if [ ! "$ALIEN_INSTALLER_VERSION" = "$(./$ALIEN_INSTALLER_NAME.new -v | awk '{ print $5 }')"  ]; then
			echo "New installer version: $(./$ALIEN_INSTALLER_NAME.new -v | awk '{ print $5 }')"
			mv "$ALIEN_INSTALLER_NAME".new "$ALIEN_INSTALLER_NAME" && if [ -f "$LOGFILE" ]; then rm "$LOGFILE"; fi  &&  exit 0
		else    echo "Current version is the latest: $ALIEN_INSTALLER_VERSION. No update required."; 
			rm "$ALIEN_INSTALLER_NAME".new; if [ -f "$LOGFILE" ]; then rm "$LOGFILE"; fi && exit 0 
		fi ;;
	-v|--v)
		echo "AliEn installer version : $ALIEN_INSTALLER_VERSION"
		exit 0 ;;
	-torrent|--torrent)	
		ALIEN_TORRENT=1 ;;
	-notorrent|--notorrent)	
		ALIEN_NO_TORRENT=1 ;;
	-version|--version)
		shift 1
		ALIEN_VERSION=$1 ;;
	-platform|--platform)
		shift 1
		ALIEN_MACHINE_PLATFORM=$1 ;;
	-arch|--arch|--architecture|-architecture)
		shift 1
		ALIEN_INSTALLER_ARCH=$1 ;;
	-force|--force)
		ALIEN_FORCE_INSTALLATION=1 ;;
	-batch|--batch)
		ALIEN_INSTALLER_BATCH=1
		ALIEN_INSTALLER_VERBOSE=1
		ALIEN_TORRENT=1 ;;
	-updatebin|--updatebin)
		ALIEN_UPDATE_BIN=1 ;;
	-verbose|--verbose)
		ALIEN_INSTALLER_VERBOSE=1 ;;
	-skip_rc|--skip_rc)
		LOG normal "skip_rc option is deprecated. Please do not use it." ;;
	*) 	INTERRUPT -1 "Invalid argument: '$*'. Please use: '$0 -help' for the list of available options"
	esac
	shift 1
done
LOG verbose "AliEn installer version: $ALIEN_INSTALLER_VERSION"
}

#############################################################
PRINTOPTIONS()
#############################################################
{
# Print available installer options for both normal and advanced users.
echo "
Usage: $0 [arguments] Makes an automatic installation of the services
  -install-dir <path> 	Specify installation directory (default: $HOME/alien)
  -type <type>       	Specify AliEn distribution to install (default: user)
  -v|--v 		Prints current installer version
  -help                 Print a list of available options
  -help-more		Print an advanced list of available options
"
if [ "$ALIEN_ADVANCED_OPTIONS" = 1 ]; then
  echo "Advanced options: Users are NOT recommended to use them unless they know what they are doing
  -restart           	Restart services after the installation has finished
  -update-me		Update the installer (if needed) to the latest version
  -version <version> 	Install a specific version of AliEn
  -platform <type>	Specify the platform to install (default: $(uname -s)) [ ${ALIEN_PLATFORM_TYPES[*]} ]
  -arch <type>		Specify the architecture to install (default: $(uname -m)) [${ALIEN_ARCH_TYPES[*]} ]
  -torrent		Perform installation through a torrent client
  -notorrent		Disable torrent installation. Standard download procedure will be used instead
  -force           	Force installation irrespective of machine version and existing versions present
  -batch             	Perform a silent installation (extremely verbose and by default in torrent mode)
  -updatebin		Force update of $HOME/bin/alien-token-init and aliensh
  -verbose		Print more detailed installation information
"; fi
}

#############################################################
GETDOWNLOADCLIENT()
#############################################################
{
# Determine the download client to use. Currently, this can be either curl or wget.
# The download prefixes are set accordingly. Exit with an error if none are found.
which wget >/dev/null 2>&1
if [ $? -eq 0 ]; then
	ALIEN_DOWNLOAD_CLIENT=wget
	ALIEN_DOWNLOAD_OUTPUT="-O"
	if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then ALIEN_DOWNLOAD_PREFIX="-U 'alien-installer v123 $$@$HOSTNAME:`pwd`'";
	else ALIEN_DOWNLOAD_PREFIX="-q"; fi
else
	which curl >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		ALIEN_DOWNLOAD_CLIENT=curl
		ALIEN_DOWNLOAD_OUTPUT="-o"
		if [ "$ALIEN_INSTALLER_VERBOSE" = "1" ]; then 	ALIEN_DOWNLOAD_PREFIX="-A 'alien-installer v123 $$@$HOSTNAME:`pwd`'";
		else 						ALIEN_DOWNLOAD_PREFIX="-s"; fi
	else 	INTERRUPT -3 "curl and wget were not found on your system."; fi
fi
LOG verbose "Download client: $ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX <path> $ALIEN_DOWNLOAD_OUTPUT <file-output>"
}

#############################################################
FINDTYPE()
#############################################################
{
# Determine available types and versions of distributions.
LOG verbose "Downloading $ALIEN_BUILD_URL/InstallReleases"

$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$ALIEN_BUILD_URL/InstallReleases" "$ALIEN_DOWNLOAD_OUTPUT" "$TMPFILE"
if  [ "$?" != "0" ]; then 	INTERRUPT -3 "Error downloading $ALIEN_BUILD_URL/InstallReleases"; fi

ALIEN_VERSIONS=(`cat "$TMPFILE" | awk 'BEGIN { FS = "_" } ; { print $1 }' | sort | uniq`)
ALIEN_TYPES=(`cat "$TMPFILE" | awk 'BEGIN { FS = "_" } ; { print $2 }' | awk 'BEGIN { FS = "=" } ; { print $1 }' | sort | uniq`)

LOG verbose "AliEn versions available: ${ALIEN_VERSIONS[*]} || Types available: ${ALIEN_TYPES[*]}"
rm "$TMPFILE"

# "user" installation is set as default. If ALIEN_TYPE is specified, then verify
# its validity (within the list of available types) before proceeding any further.
if [ "$ALIEN_TYPE" = "" ]; then ALIEN_TYPE=user; LOG verbose "Default installation type: $ALIEN_TYPE";
else
	for index in ${ALIEN_TYPES[*]};
	do if [[ $index == $ALIEN_TYPE ]]; then LOG verbose "User specified valid installation type: $ALIEN_TYPE"; ALIEN_TYPE_FOUND=1; fi
	done
	if [ ! "$ALIEN_TYPE_FOUND" = 1 ]; then INTERRUPT -3 "Invalid type of installation was specified \n Please use one of the following installation types: ${ALIEN_TYPES[*]}"; fi
fi
}

#############################################################
CHECKPREINSTALL()
#############################################################
{
# Advise for .alien/installer.rc and .alien/cache to be cleared before starting the installation.
if [  -f $HOME/.alien/installer.rc ]; then
	echo -n "Found $HOME/.alien/installer.rc. Delete the file? (default: Y - Highly recommended) [Y/n]"
	read alien_rc_delete
	case "$alien_rc_delete" in
	y|Y)	rm $HOME/.alien/installer.rc
		LOG normal "File installer.rc removed" ;;
	n|N)	LOG normal "File not removed" ;;
	"")	rm $HOME/.alien/installer.rc
		LOG normal "File installer.rc removed" ;;
	*)	INTERRUPT -3 "Invalid answer. Installation cancelled."
	esac; fi

if [  -d $HOME/.alien/cache ]; then
	echo -n "   Found $HOME/.alien/cache/ directory. Delete the directory? (default: Y - Highly recommended) [Y/n]"
	read alien_cache_delete
	case "$alien_cache_delete" in
	y|Y)	rm -r $HOME/.alien/cache
		LOG normal "Directory $HOME/.alien/cache removed" ;;
	n|N)	LOG normal "Directory not removed" ;;
	"")	rm -r $HOME/.alien/cache
		LOG normal "Directory $HOME/.alien/cache removed" ;;
	*)	INTERRUPT -3 "Invalid answer. Installation cancelled."
	esac; fi
}

#############################################################
SETINSTALLDIR()
#############################################################
{
# Set the initial installation directory and link name paths.
ALIEN_USER_DIR=$(cd $ALIEN_USER_DIR && pwd)
ALIEN_INSTALL_DIR=$(cd $ALIEN_USER_DIR/../ && pwd)
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR/alien"
}

#############################################################
FINDUSERDIR()
#############################################################
{
# If user did not specify a directory then use $HOME/alien as default. Otherwise, check
# that the current directory can be written to i.e. correct write permissions.
if [ "$ALIEN_USER_DIR" = "" ]; then
	ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR=$HOME/alien}
	ALIEN_USER_DIR=${ALIEN_INSTALL_DIR}
	LOG normal "Installing in the default directory: $ALIEN_USER_DIR \n   If you wish to install in a specific directory do: ./alien-installer -install-dir <path>"
else
	if [ ! "${ALIEN_USER_DIR:0:1}" = "/"  ]; then ALIEN_USER_DIR="$(pwd)/$ALIEN_USER_DIR"; fi
	if [ ! -d "$ALIEN_USER_DIR" ]; then
		
		mkdir -p $ALIEN_USER_DIR
		if [ ! $? = 0 ]; then 	INTERRUPT -3 "Failed to create user directory. Please check you have correct permissions."
		else			LOG verbose "$ALIEN_USER_DIR created successfully"; fi
		SETINSTALLDIR
		rm -rf "$ALIEN_USER_DIR"
	else
		if [ "$ALIEN_INSTALLER_BATCH" = "" ]; then
			echo -n "   $ALIEN_USER_DIR already exists. Do you wish to use it anyway? default: n [Y/n]"
			read alien_overwrite_install
			case "$alien_overwrite_install" in
			y|Y)	LOG verbose "Reusing $ALIEN_USER_DIR"
	    			SETINSTALLDIR ;;
			n|N)	INTERRUPT -3 "Please specify another installation directory." ;;
			"")	INTERRUPT -3 "Please specify another installation directory." ;;
			*)	INTERRUPT -3 "Invalid answer. Installation cancelled."
			esac
		else
			LOG verbose "Reusing $ALIEN_USER_DIR"
			SETINSTALLDIR; fi
	fi
	LOG normal "Installing in the user specified directory: $ALIEN_USER_DIR"; fi
LOG verbose "AliEn installation directory prefix: $ALIEN_INSTALL_DIR"
}

#############################################################
STARTLOCK()
#############################################################
{
# Starts a loop that updates the lock file every 10 seconds
# with the hostname, current time and the installation directory.
while [ true ]; do
	echo "$$ $HOSTNAME $(date +%s) $ALIEN_INSTALL_DIR" >> "$LOCK"
	sleep 10
done
}

#############################################################
STOPLOCK()
#############################################################
{
# If lock process exists and is running, then stop it.
if [ ! "$ALIEN_LOCK_PID" = "" ]; then
	TMP_PROCESS=`ps -p "$ALIEN_LOCK_PID"`
	if [ ! "$TMP_PROCESS" = "" ]; then
		disown 	$ALIEN_LOCK_PID >/dev/null 2>&1
		kill 	$ALIEN_LOCK_PID >/dev/null 2>&1; fi
fi
if [ -f "$LOCK" ]; then rm -f "$LOCK"; fi
}

#############################################################
GETINSTALLTIME()
#############################################################
{
# Determine the installation time
ALIEN_TIME_END=`tail -n 1 "$LOCK" | awk '{ print $3 }'`
ALIEN_TIME_START=`head -n 2 "$LOCK" | tail -n 1 | awk '{ print $3 }'`
ALIEN_TIME_ELAPSED=$(($ALIEN_TIME_END - $ALIEN_TIME_START))
}

#############################################################
GETLASTACTIVITY()
#############################################################
{
# Determine how long ago was the installer active
ALIEN_TIME_CURRENT=`date +%s`
ALIEN_TIME_LAST=`tail -n 1 "$LOCK" | awk '{ print $3 }'`
ALIEN_TIME_ACTIVITY=$(($ALIEN_TIME_CURRENT - $ALIEN_TIME_LAST))
}

#############################################################
WAITFORLOCK()
#############################################################
{
# Check lock every 10 seconds.
while [ -f "$LOCK" ];
do 	sleep 10
done
}

#############################################################
CHECKLOCK()
#############################################################
{
# - If the lock file already exists:
#	- Check if the current installation and lock hostnames are the same
#		- For the same hostname check if the installation process is still alive
#			- If the process is not alive clean and restart the installation.
#			  else if the process is active check its last activity and time elapsed.
#				- If the old installation exceeded allowed time, gather all subprocesses and kill them. Clean and restart installation.
#				  else if the time has not exceeded, exit the current installation.
#		- For different hostnames either wait for ongoing installation to finish in order to restart the services. Otherwise exit.
# - Else if no lock file exists create and commence the lock.

if [ -f "$LOCK" ]; then
	ALIEN_HOSTNAME=`tail -n 1 "$LOCK" | awk '{ print $2 }'`
	LOG verbose "Hostname in $LOCK: $ALIEN_HOSTNAME"
	if [ "$ALIEN_HOSTNAME" = "$HOSTNAME" ]; then
		ALIEN_PROCESS=`tail -n 1 "$LOCK" | awk '{ print $1 }' `
		LOG verbose "Checking existing process activity: $ALIEN_PROCESS"
		ALIEN_ALIVE=`ps -p "$ALIEN_PROCESS" | grep "$ALIEN_PROCESS"`
		if [ "$ALIEN_ALIVE" = "" ]; then
				LOG normal "Existing installation no longer active. Cleaning previous installation"
				ALIEN_PREVIOUS_INSTALL=`tail -n 1 "$LOCK" | awk '{ print $4 }'`
				MOVETOFAILED "$ALIEN_PREVIOUS_INSTALL"
				if [ -f "$TMPFILE" ]; then rm -f "$TMPFILE"; fi
				if [ -f "$LOCK" ]; then rm -f "$LOCK"; fi
		else
			GETINSTALLTIME
			GETLASTACTIVITY
			if [ $ALIEN_TIME_ELAPSED -gt 7200 -o $ALIEN_TIME_ACTIVITY -gt 86400 ]; then
				LOG normal "Previous installation is taking: $ALIEN_TIME_ELAPSED seconds; Last activity: $ALIEN_TIME_ACTIVITY seconds ago \n   Cleaning previous installation"
				PROCESS_LIST=""
				GETPROCESSLIST "$ALIEN_PROCESS"
				LOG verbose "Previous installation processes list: ${PROCESS_LIST[@]}"
				kill ${PROCESS_LIST[@]}
				ALIEN_PREVIOUS_INSTALL=`tail -n 1 "$LOCK" | awk '{ print $4 }'`
				MOVETOFAILED "$ALIEN_PREVIOUS_INSTALL"
				if [ -f "$TMPFILE" ]; then rm -f "$TMPFILE"; fi
				if [ -f "$LOCK" ]; then rm -f "$LOCK"; fi
			else
				LOG normal "AliEn installation may already be running for $ALIEN_USER_DIR \n   Installation cancelled. Exit code: 0"
				#LOGFILERELOCATE
				exit 0; fi
		fi
	else
		if [ "$ALIEN_RESTART" = 1 ]; then
			STARTDOTS "Waiting for the existing installation to finish."
			WAITFORLOCK
			STOPDOTS
			SERVICERESTART
			LOG normal "Services restarted for an existing installation."
			exit 0
		else
			GETINSTALLTIME
			GETLASTACTIVITY
			LOG normal "Hostname $ALIEN_HOSTNAME is already running AliEn installation in $ALIEN_USER_DIR
				Installation is taking: $ALIEN_TIME_ELAPSED seconds; Last activity: $ALIEN_TIME_ACTIVITY seconds ago
				Installation cancelled! Exit code: 0"
			exit 0; fi
	fi
fi
# Start a new lock
echo "AliEn $ALIEN_TYPE installation for: $ALIEN_USER_DIR using $ALIEN_INSTALLER_NAME" >> "$LOCK"
echo "$$ $HOSTNAME $(date +%s) $ALIEN_INSTALL_DIR" >> "$LOCK"
STARTLOCK &
ALIEN_LOCK_PID=$!
LOG verbose "Lock initiated on process: $ALIEN_LOCK_PID for $ALIEN_USER_DIR installation of AliEn $ALIEN_TYPE"
}

#############################################################
FINDPLATFORM()
#############################################################
{
# If platform was not specified by the user, then use uname
if [ "$ALIEN_MACHINE_PLATFORM" = "" ]; then ALIEN_MACHINE_PLATFORM=$(uname -s); fi

# Special checks for Darwin and Ubuntu machines
if [ "$ALIEN_INSTALLER_ARCH" = "" ]; then
	ALIEN_INSTALLER_ARCH=$(uname -m)
	if [ "$ALIEN_MACHINE_PLATFORM" = "Darwin" ]; then
		sysctl machdep.cpu.extfeatures | grep "64" > /dev/null 2>&1
		if [ $? -eq 0 ]; then 	ALIEN_INSTALLER_ARCH=x86_64;
		else			ALIEN_INSTALLER_ARCH=i686; fi
		ALIEN_SYSTEM_VERSION=`system_profiler SPSoftwareDataType | grep "System Version" | awk '{ number=NF-1; print $number }' | awk 'BEGIN { FS="." } { print $1"."$2 }'`
		LOG normal "Darwin version determined as: $ALIEN_SYSTEM_VERSION"
		if [ "$ALIEN_FORCE_INSTALLATION" = "" ]; then
			if [ $( echo $ALIEN_SYSTEM_VERSION | awk 'BEGIN { FS="." } ; { print $1 }') -lt 10 -o $( echo $ALIEN_SYSTEM_VERSION | awk 'BEGIN { FS="." } ; { print $2 }') -lt 6 ]; then INTERRUPT -3 "Darwin $ALIEN_SYSTEM_VERSION not supported."; fi
		else LOG normal "Darwin version ignored. Installation forced."; fi
	elif [ "$ALIEN_INSTALLER_ARCH" = "x86_64" -a "$(lsb_release -i | awk '{print $NF}')" = "Ubuntu" ]; then 
		ALIEN_MACHINE_PLATFORM=Ubuntu
		ALIEN_SYSTEM_VERSION=`lsb_release -r | awk '{ print $2 }'`
		if [ "$ALIEN_FORCE_INSTALLATION" = "" ]; then
			if [ $( echo $ALIEN_SYSTEM_VERSION | awk 'BEGIN { FS="." } ; { print $1 }') -lt 10 -o $( echo $ALIEN_SYSTEM_VERSION | awk 'BEGIN { FS="." } ; { print $2 }') -lt 10 ]; then LOG verbose "Ubuntu $ALIEN_SYSTEM_VERSION not compatible. Using SLC settings."; ALIEN_MACHINE_PLATFORM=Linux; fi
		else LOG normal "Ubuntu version $ALIEN_SYSTEM_VERSION ignored. Installation forced."; fi
	else	ALIEN_MACHINE_PLATFORM=Linux; fi
fi

LOG verbose "Platform determined as: $ALIEN_MACHINE_PLATFORM \n   Architecture determined as: $ALIEN_INSTALLER_ARCH"
if [ "$ALIEN_MACHINE_PLATFORM" = "Linux" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i686) ALIEN_INSTALLER_PLATFORM=i686-pc-linux-gnu ;;
			ia64) ALIEN_INSTALLER_PLATFORM=ia64-unknown-linux-gnu ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-unknown-linux-gnu ;;
			*) LOG normal "Invalid architecture was specified"
			INTERRUPT -3 "Please use one of the following available architectures: ${ALIEN_ARCH_TYPES[*]}" ;;
		esac
elif [ "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i686) LOG verbose "$ALIEN_MACHINE_PLATFORM 32 bits is not available. Switching to Linux 32 bits."; ALIEN_MACHINE_PLATFORM="Linux"; ALIEN_INSTALLER_PLATFORM=i686-pc-linux-gnu ;;
			i386) LOG verbose "$ALIEN_MACHINE_PLATFORM 32 bits is not available. Switching to Linux 32 bits."; ALIEN_MACHINE_PLATFORM="Linux"; ALIEN_INSTALLER_PLATFORM=i686-pc-linux-gnu ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-unknown-linux-gnu ;;
			*) INTERRUPT -3 "Please use one of the following available architectures: ${ALIEN_ARCH_TYPES[*]}";;
		esac
elif [ "$ALIEN_MACHINE_PLATFORM" = "Darwin" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i386) INTERRUPT -3 "Darwin 32bit platform no longer available" ;;
			i686) INTERRUPT -3 "Darwin 32bit platform no longer available" ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-apple-darwin ;;
			*) LOG normal "Invalid platform was specified"
			INTERRUPT -3 "Please use one of the following available platforms: ${ALIEN_PLATFORM_TYPES[*]}" ;;
		esac; fi
LOG normal "Platform set as $ALIEN_MACHINE_PLATFORM: $ALIEN_INSTALLER_PLATFORM"
}

#############################################################
FINDVERSION()
#############################################################
{
# Determine AliEn version to install
if [ "$ALIEN_VERSION" = "" ]; then
	LOG verbose "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $ALIEN_BUILD_URL/Releases $ALIEN_DOWNLOAD_OUTPUT $TMPFILE"
	
	$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$ALIEN_BUILD_URL/Releases" "$ALIEN_DOWNLOAD_OUTPUT" "$TMPFILE"
	if  [ ! "$?" = "0" ]; then INTERRUPT -3 "Error getting file $ALIEN_BUILD_URL/Releases"; fi

	ALIEN_VERSION=`grep 'Stable' $TMPFILE | head -n 1 | awk '{print $5}'`
	
	if [ "$ALIEN_VERSION" = "" ]; then INTERRUPT -3 "Error getting AliEn version from $releases"; fi
	rm "$TMPFILE"
else
	# If the user has specified a version, check its availability
	for index in ${ALIEN_VERSIONS[*]};
	do 	if [[ $index == $ALIEN_VERSION ]]; then
		LOG verbose "User specified a valid version: $ALIEN_VERSION"
		ALIEN_VERSION_FOUND=1; fi
	done
	
	if [ ! "$ALIEN_VERSION_FOUND" = 1 ]; then LOG normal "Invalid version was specified"; INTERRUPT -3 "Please use one of the following available versions: ${ALIEN_VERSIONS[*]}"; fi
fi
LOG verbose "Installing version: $ALIEN_VERSION"
}

#############################################################
FINDRELEASES()
#############################################################
{
# Determine the download server for the platform
LOG verbose "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $ALIEN_BUILD_URL/BitServers $ALIEN_DOWNLOAD_OUTPUT $TMPFILE"

$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$ALIEN_BUILD_URL/BitServers" "$ALIEN_DOWNLOAD_OUTPUT" "$TMPFILE"
if  [ $? != 0 ]; then INTERRUPT -3 "Error getting file $releases"; fi

# Map relevant platform to a build server
if [ "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then ALIEN_BITS_URL=`grep "$ALIEN_MACHINE_PLATFORM" "$TMPFILE" | awk '{ print $3 }'`;
else ALIEN_BITS_URL=`grep "$ALIEN_INSTALLER_PLATFORM" "$TMPFILE" | awk '{print $3'}`; fi

if [ "$ALIEN_BITS_URL" = "" ]; then cat $TMPFILE | LOG normal; INTERRUPT -3 "Error getting BITS URL $releases"; fi

# Set the AliEn distribution tarball download path
ALIEN_BITS_URL="$ALIEN_BITS_URL/$ALIEN_INSTALLER_PLATFORM/$ALIEN_VERSION/download/"

rm -f $TMPFILE
}

############################################################
FINDCURRENTVERSION()
############################################################
{
# Determine the tarball distribution version/name available on the build server
LOG verbose "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWLOAD_PREFIX $ALIEN_BITS_URL/../../../../CompiledReleases $ALIEN_DOWNLOAD_OUTPUT $TMPFILE"

$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$ALIEN_BITS_URL/../../../../CompiledReleases" "$ALIEN_DOWNLOAD_OUTPUT" "$TMPFILE"
if [ $? != 0 ]; then INTERRUPT -3 "Error getting file $ALIEN_BITS_URL/../../../../CompiledReleases"; fi

# Parse for minor/cvs version
ALIEN_MINOR_VERSION=`cat "$TMPFILE" | grep "$ALIEN_VERSION" | awk  '{print \$4}'`

rm "$TMPFILE"

# Check if there is an existing installation in the same installation path
if [ -d "$ALIEN_USER_DIR" ]; then
	ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print $NF }' | grep new`

	if [ "$ALIEN_EXISTING_VERSION" = "" ]; then ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print substr($NF,index($NF,".")+1) }' `;
	else ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print substr($NF,index($NF,".")+1,index($NF,"_")-index($NF,".")-1) }'`; fi
fi

# If the installation is forced do not compare with any existing installation and proceed with the installation as usual.
if [ "$ALIEN_FORCE_INSTALLATION" = 1 ]; then	LOG normal "Forcing new AliEn installation. Existing versions will be ignored.";
else
	if [ ! "$ALIEN_EXISTING_VERSION" = "" ]; then
		LOG normal "Checking the version to be installed (if it is newer than $ALIEN_EXISTING_VERSION)"
		
		if [ "$ALIEN_EXISTING_VERSION" = "$ALIEN_VERSION.$ALIEN_MINOR_VERSION" ]; then
			LOG normal "You have the latest version installed ($ALIEN_EXISTING_VERSION). No installation is necessary"
			STOPLOCK
			if [ -f "$TMPFILE" ]; then rm -f "$TMPFILE"; fi
			if [ -f "$LOCK" ]; then rm -f "$LOCK"; fi
			LOG normal "Installation cancelled"
			LOGFILERELOCATE
			exit 0
		fi
	else 	LOG verbose "No existing version was found for $ALIEN_USER_DIR. Installing new version"; fi
fi
LOG verbose "Ready to install $ALIEN_VERSION.$ALIEN_MINOR_VERSION"
}

############################################################
FALLBACKTONORMAL()
############################################################
{
LOG normal "$@ Falling back to normal download"
LOG verbose "Cleaning the installation folder: $ALIEN_INSTALL_DIR"

rm -rf $ALIEN_INSTALL_DIR/*
DOWNLOADNORMAL
}

############################################################
DOWNLOADNORMAL()
############################################################
{
if [ ! "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then STARTDOTS "Downloading $ALIEN_TYPE distribution"; fi

LOG verbose "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $FILE $ALIEN_DOWNLOAD_OUTPUT alien.tar.gz"

$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" $FILE "$ALIEN_DOWNLOAD_OUTPUT" alien.tar.gz
if [ "$?" != 0 ]; then 
	if [ $ALIEN_MACHINE_PLATFORM = "Ubuntu" ]; then
		if [ -f alien.tar.gz ]; then rm alien.tar.gz; LOG verbose "Broken alien tarball removed"; fi
		ALIEN_MACHINE_PLATFORM=Linux
		ALIEN_BITS_URL=""
		FINDRELEASES
		# Define the url from where AliEn is downloaded
		if [ "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then FILE=${ALIEN_BITS_URL}alien_ubuntu-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2;
		else FILE=${ALIEN_BITS_URL}alien-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2; fi
		$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" $FILE "$ALIEN_DOWNLOAD_OUTPUT" alien.tar.gz
		if [ "$?" != 0 ]; then INTERRUPT -4 "Error downloading alien distribution tarball"; fi
	else
		INTERRUPT -4 "Error getting alien distribution tarball"; fi
fi

if [ ! "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then STOPDOTS; fi

STARTDOTS "Extracting the files"

tar jxf alien.tar.gz
if [ "$?" != 0 ]; then INTERRUPT -4 "Error extracting the distribution tarball"; fi

STOPDOTS

if [ ! -f $ALIEN_INSTALL_DIR/share/alien/ALIEN_VERSION ]; then INTERRUPT -4 "The version file doesn't exist"; fi
}

############################################################
DOWNLOADTORRENT()
############################################################
{
TCLIENT="torrent_client_$ALIEN_INSTALLER_ARCH.tar.bz2"
WWWROOT="http://alitorrent.cern.ch"

LOG verbose "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $WWWROOT/torrent_client/$TCLIENT $ALIEN_DOWNLOAD_OUTPUT $TCLIENT"

$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$WWWROOT/torrent_client/$TCLIENT" "$ALIEN_DOWNLOAD_OUTPUT" $TCLIENT 
if [ "$?" != 0 ]; then FALLBACKTONORMAL "Error downloading torrent client."; fi

bzip2 -c -d "$TCLIENT" | tar -x
if [ "$?" != 0 ]; then FALLBACKTONORMAL "Error extracting the torrent client."; fi

# Define the url from where AliEn is downloaded
if [ "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then 	FULLNAME="alien_ubuntu-$ALIEN_VERSION-$ALIEN_TYPE-$ALIEN_INSTALLER_ARCH.tar.bz2";
else FULLNAME="alien-$ALIEN_VERSION-$ALIEN_TYPE-$ALIEN_INSTALLER_ARCH.tar.bz2"; fi
TFILE="$WWWROOT/torrents/$FULLNAME.torrent"

LOG normal "Getting the torrent"
torrent_client_$ALIEN_INSTALLER_ARCH/download "$TFILE" -d torrent_source 
if [ "$?" != 0 ]; then FALLBACKTONORMAL "Error downloading $TFILE."; fi

LOG verbose "Seeding the torrent"
torrent_client_$ALIEN_INSTALLER_ARCH/seed "$TFILE" -d torrent_source
#if [ "$?" != 0 ]; then INTERRUPT -4 "Error seeding $TFILE!"; fi

STARTDOTS "Extracting the files"

tar jxf torrent_source/*/*.tar.bz2
if [ "$?" != 0 ]; then FALLBACKTONORMAL "Error extracting the distribution."; fi

STOPDOTS

# Fallback in case the torrent installation is corrupted
if [ ! -f $ALIEN_INSTALL_DIR/share/alien/ALIEN_VERSION ]; then FALLBACKTONORMAL "ALIEN_VERSION file not found."; fi
}

#############################################################
RELOCATE()
#############################################################
{
# Relocate the installation to local installation path
# prefix = the local system installation path
# build_prefix = original build prefix

prefix=$ALIEN_USER_DIR
build_prefix=/opt/alien

if [ "$prefix" != "$build_prefix" ]; then
	
	# For everything but user distribution, do full relocation (perl, globus etc)
	if [ "$ALIEN_TYPE" != "user" ]; then
		config=`find $prefix/lib/perl5 -name Config.pm -exec grep -l "This file was created by configpm" {} \;`
		LOG silent "Perl relocation: config=$config"		
	
		if [ "$config" = "" ] ; then INTERRUPT -5 "Couldn't find Config.pm in $prefix/lib/perl5!"; fi
	
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $config
		if [ ! "$?" = "0" ]; then 	INTERRUPT -5 "Perl relocation: Failed for Config.pm"
		else 				LOG silent "Perl relocation: Config.pm done"; fi
		
		config=`find $prefix/lib/perl5 -path "*/CORE/config.h"`
		if [ "$config" = "" ] ; then INTERRUPT -5 "Couldn't find CORE/config.h in $prefix/lib/perl5!"; fi
		
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix %$prefix %sg; s%\"$build_prefix\"%\"$prefix\"%sg; " $config
		if [ "$?" != 0 ]; then 	INTERRUPT -5 "Perl relocation: Failed for CORE/config.h"
		else 			LOG silent "Perl relocation: CORE/config.h done"; fi
		
		for file in `find $prefix/lib/perl5 -name .packlist`
		do
			perl -pi -e "s%$build_prefix/%$prefix/%g" $file	
			if [ "$?" != 0 ]; then 	INTERRUPT -5 "Perl relocation: Failed for $file"
			else 			LOG silent "Perl relocation: $file done"; fi
		done
		
		config=$prefix/httpd/conf/httpd.conf
		if [ -f "$config" ]; then
		        perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix %$prefix %sg; s%\"$build_prefix\"%\"$prefix\"%sg; " $config
		        if [ "$?" != 0 ]; then  INTERRUPT -5 "Httpd relocation: Failed for $config"; fi
                        config_user=`whoami`
            		perl -pi -e "s%User daemon%User $config_user%sg; s%User daemon'%User $config_user'%sg; s%User daemon %User $config_user %sg; s%\"User daemon\"%\"User $config_user\"%sg; " $config
                        if [ "$?" != 0 ]; then  INTERRUPT -5 "Httpd user name relocation: Failed for $config"; fi
                        config_group=`ls -all -d $HOME | awk '{ print $4 }'`
                        perl -pi -e "s%Group daemon%Group $config_group%sg; s%Group daemon'%Group $config_group'%sg; s%Group daemon %Group $config_group %sg; s%\"Group daemon\"%\"Group $config_group\"%sg; " $config
                        if [ "$?" != 0 ]; then  INTERRUPT -5 "Httpd group name relocation: Failed for $config"; fi
            		perl -pi -e "s%/home/bits%$HOME%sg; s%/home/bits'%$HOME'%sg; s%/home/bits %$HOME %sg; s%\"/home/bits\"%\"$HOME\"%sg; " $config
            		if [ "$?" != 0 ]; then  INTERRUPT -5 "Httpd $HOME relocation: Failed for $config"; fi                                               
		fi
		
		if [ -f $prefix/globus/setup/globus/setup-globus-common ]; then	
			env GLOBUS_LOCATION=$prefix/globus GPT_LOCATION=$prefix/globus PERL5LIB="$prefix/globus/lib/perl5:$prefix/lib/perl5" $prefix/bin/perl $prefix/globus/setup/globus/setup-globus-common.pl >> $LOGFILE
			LOG silent "globus relocation done"; fi

		if [ -f $prefix/bin/alien-perl ]; then
			#$prefix/bin/alien-perl --bootstrap --prefix $prefix >> $LOGFILE
			$prefix/bin/alien-perl --bootstrap --prefix $ALIEN_INSTALL_DIR >> $LOGFILE
			if [ "$?" != 0 ]; then 	INTERRUPT -5 "alien-perl: failed relocation"
			else 			LOG silent "alien-perl: relocation done"; fi
		fi
	fi

	for p in curl-config gpg-error-config libgcrypt-config libgnutls-config libgnutls-extra-config uuid-config xml2-config freetype-config pkg-config
	do
	if [ -f $prefix/bin/$p ] ; then
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $prefix/bin/$p
		if [ "$?" != 0 ]; then	INTERRUPT -5 "$p: relocation failed"
		else			LOG silent "$p: relocation done"; fi
	fi
	done

	(cd $prefix/api/bin; ./alien_apiservice-bootstrap >> $LOGFILE)
	if [ "$?" != 0 ]; then 	INTERRUPT -5 "gapi: failed relocation"
	else 			LOG silent "gapi: relocation done"; fi
fi
}

#############################################################
SERVICERESTART()
#############################################################
{
# Restart the services when requested.
if [ "$ALIEN_RESTART" = 1 ]; then
	NOHUP=`which nohup 2> /dev/null`
	LOG normal " Let's restart the services (with $NOHUP) \n This very first time, we have to kill everything" 
	
	($NOHUP $ALIEN_INSTALL_DIR/etc/rc.d/init.d/aliend restart &)
	if [ "$?" != 0 ]; then LOG normal "Failed to restart the services"; fi
fi
}

#############################################################
SETBINLINKS()
#############################################################
{
# Create links to alien-token-init and aliensh in $HOME/bin
if [ ! -d "$HOME/bin" ]; then
	mkdir -p $HOME/bin
	LOG verbose "$HOME/bin did not exist. Thus it was created."; fi

#LOG verbose "Creating soft links to alien-token-init and aliensh in $HOME/bin"

if [ "$ALIEN_TYPE" = "vobox" ]; then
	LOG verbose "Creating/Overriding links to alien and aliend in $HOME/bin"
	if [ -L "$HOME/bin/alien" ]; then 	LOG verbose "$HOME/bin/alien already exists. Overwriting them."; rm "$HOME/bin/alien"; fi
	ln -s "$ALIEN_INSTALL_DIR/scripts/alien" "$HOME/bin/alien"
	if [ -L "$HOME/bin/aliend" ]; then	LOG verbose "$HOME/bin/aliend already exists. Overwriting them."; rm "$HOME/bin/aliend"; fi
	ln -s "$ALIEN_INSTALL_DIR/etc/rc.d/init.d/aliend" "$HOME/bin/aliend"
else
	LOG verbose "Creating soft links to alien-token-init and aliensh in $HOME/bin"
	if [ -L "$HOME/bin/alien-token-init" ]; then LOG verbose "Link $HOME/alien-token-init already exists. Overwriting it."; rm "$HOME/bin/alien-token-init"; fi

cat >> $HOME/bin/alien-token-init << EOF
#! /bin/bash
(cd $ALIEN_INSTALL_DIR/api/bin && ./alien-token-init \$@)
EOF

	chmod +x "$HOME/bin/alien-token-init"
	if [ -L "$HOME/bin/aliensh" ]; then LOG verbose "Link $HOME/aliensh aliready exists. Overwriting it."; rm "$HOME/bin/aliensh"; fi
	ln -s "$ALIEN_INSTALL_DIR/api/bin/aliensh" "$HOME/bin/aliensh"
fi
}

#################################################################################################
################################## Main #########################################################

# Arrays listing available platforms and architectures 
ALIEN_INSTALLER_VERSION=1.45
ALIEN_PLATFORM_TYPES=(Linux Ubuntu Darwin)
ALIEN_ARCH_TYPES=(i686 i386 ia64 x86_64)
ALIEN_BUILD_URL="http://alienbuild.cern.ch:8880"

# Designating the names and locations of temporary files
ALIEN_INSTALLER_NAME=`basename "$0"`
LOGFILE=`pwd`"/$ALIEN_INSTALLER_NAME.log"
if [ -f "$LOGFILE" ]; then rm "$LOGFILE"; LOG verbose "Previous $LOGFILE removed"; fi
TMPFILE=`pwd`"/.$ALIEN_INSTALLER_NAME.$$.tmp"
if [ -f "$TMPFILE" ]; then rm "$TMPFILE"; LOG verbose "Previous $TMPFILE removed"; fi

# Clearing the environment for the installation
ALIEN_VERSION=""
ALIEN_INSTALLER_PLATFORM=""
ALIEN_MACHINE_PLATFORM=""
ALIEN_FORCE_INSTALLATION=""

# Parse arguments provided by the user
PARSEARGUMENTS $*

# Determine the client to use for downloads
GETDOWNLOADCLIENT

# Determine the type of AliEn distribution to install
FINDTYPE

# -notorrent overrides any existing torrent enabling options
if [ "$ALIEN_NO_TORRENT" = "1" ]; then ALIEN_TORRENT=0; fi

LOG normal "###################### Automated AliEn $ALIEN_TYPE installer ##############################"

# Make sure that cache and installer.rc are cleaned
if [ "$ALIEN_INSTALLER_BATCH" = "" ]; then CHECKPREINSTALL; fi

# Set user defined installation paths otherwise use $HOME/alien
FINDUSERDIR

# Define the lock file to use for current installation
LOCK="$ALIEN_USER_DIR".lock

# Initiate/Check the lock on the current installation
CHECKLOCK

# Set user defined platform, otherwise use the current one
FINDPLATFORM

# Set user specified version, otherwise get the latest version
FINDVERSION

# Find the download server
FINDRELEASES

# Check for the latest build, reinstall if old or non-existent
FINDCURRENTVERSION

# Installation directory prefixed with version and build numbers will be used
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"
ALIEN_INSTALL_LOCAL="alien.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"

# If the installation directory already exists, then increment by "_new"
while [ -d "$ALIEN_INSTALL_DIR" ];
do 	LOG verbose "Another Installation directory detected: $ALIEN_INSTALL_DIR"
	ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR}_new
	ALIEN_INSTALL_LOCAL=${ALIEN_INSTALL_LOCAL}_new
done

# Batch mode. If enabled skip the waiting and start the installation
if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
	STARTDOTS "Waiting 10 seconds. Press 'Ctrl+c' to exit the installation"
	sleep 10
	STOPDOTS; fi

# Define the url from where AliEn is downloaded
if [ "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then FILE=${ALIEN_BITS_URL}alien_ubuntu-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2;
else FILE=${ALIEN_BITS_URL}alien-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2; fi

# Create the installation directory for AliEn
mkdir -p $ALIEN_INSTALL_DIR

if [ ! $? = 0 ]; then	INTERRUPT -3 "Failed to create the installation directory. Please check you have correct permissions."
else			LOG verbose "$ALIEN_INSTALL_DIR created successfully"; fi

cd $ALIEN_INSTALL_DIR

if [ "$ALIEN_TORRENT" = "1" ]; then	
    if [ "$ALIEN_MACHINE_PLATFORM" = "Darwin" -o "$ALIEN_MACHINE_PLATFORM" = "Ubuntu" ]; then 
		LOG verbose "Torrent installation for $ALIEN_MACHINE_PLATFORM is not available. Using normal download."; DOWNLOADNORMAL;
    else	DOWNLOADTORRENT; fi
else		DOWNLOADNORMAL; fi

LOG verbose "Testing $ALIEN_INSTALL_DIR/bin/perl"

# Check perl compatibility on the current platform
if [ -f $ALIEN_INSTALL_DIR/bin/perl ]; then
		test_perl=$ALIEN_INSTALL_DIR/bin/perl
		test_build=`$test_perl -I $ALIEN_INSTALL_DIR/lib/perl5 -MConfig -e 'print $Config{prefix}'`
		LOG verbose "Perl test: test_build=$test_build"
		if [ -z $test_build ]; then
			rm -rf  $ALIEN_INSTALL_DIR.failed
			INTERRUPT -5 "AliEn perl is incompatible with the system. Please check your platform requirements on http://alien.cern.ch"
		else 	LOG verbose "Perl test: success"; fi
else 		LOG verbose "AliEn perl was not found. Installation without perl assumed"; fi

# Remove the old link if it already exists
if [ -d "$ALIEN_USER_DIR" ]; then rm "$ALIEN_USER_DIR"; fi

# Link/Overwrite the link for the user directory to the installation directory
ln -s $ALIEN_INSTALL_LOCAL $ALIEN_USER_DIR

if [ "$ALIEN_INSTALLER_VERBOSE" != "1" ]; then
	STARTDOTS "Relocating the $ALIEN_TYPE installation"
	RELOCATE
	STOPDOTS
else	RELOCATE; fi

# Remove the distribution tarball
if [ -f "alien.tar.gz" ]; then  rm -rf alien.tar.gz; fi

# Write the set installation environment to .Environment
cat >> $ALIEN_INSTALL_DIR/.Environment <<EOF
ALIEN_ROOT=$ALIEN_INSTALL_DIR
ALIEN_PATH=\$ALIEN_ROOT/api/bin:\$ALIEN_ROOT/globus/bin
ALIEN_LD_LIBRARY_PATH=\$ALIEN_ROOT/api/lib:\$ALIEN_ROOT/globus/lib:\$ALIEN_ROOT/lib:\$ALIEN_ROOT/lib64:\$ALIEN_ROOT/lib/mysql
GLOBUS_LOCATION=\$ALIEN_ROOT/globus
X509_CERT_DIR=\$ALIEN_ROOT/globus/share/certificates
GAPI_LOCATION=\$ALIEN_ROOT/api
MYPROXY_LOCATION=\$ALIEN_ROOT/globus

EOF

# Restart services on demand
SERVICERESTART

# Add symbolic links in user home/bin directory
if [ "$ALIEN_INSTALLER_BATCH" = ""  -o "$ALIEN_UPDATE_BIN" = "1" ]; then SETBINLINKS; fi

# Get the time elapsed for the installation.
GETINSTALLTIME

# Print out installation time
LOG verbose "AliEn $ALIEN_TYPE installation took approximately $ALIEN_TIME_ELAPSED seconds"

# Inform that the installation was successful
LOG normal "Installation finished!"

# Remove installation lock 
STOPLOCK

# Relocate the log file as appropriate
LOGFILERELOCATE

exit 0
